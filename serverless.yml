service: itsjeffro

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway: 
    restApiId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-restApiId
    restApiRootResourceId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-rootResourceId
  environment:
    DB_HOST: ${env:DB_HOST}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_PORT: ${env:DB_PORT}
    DB_DATABASE: ${env:DB_DATABASE}

package:
  exclude:
    - ./**
    - '!node_modules/**'
    - node_modules/aws-sdk/**
  include:
    - dist/**
    - migrations/**
    - config/**

functions:
  getPosts:
    handler: dist/handlers/posts.getPosts
    events:
      - http:
          path: posts
          method: get
          cors: true
          request:
            parameters:
              paths:
                uuid: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  getPost:
    handler: dist/handlers/posts.getPost
    events:
      - http:
          path: posts/{uuid}
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  createPost:
    handler: dist/handlers/posts.createPost
    events:
      - http:
          path: posts
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  updatePost:
    handler: dist/handlers/posts.updatePost
    events:
      - http:
          path: posts/{uuid}
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  deletePost:
    handler: dist/handlers/posts.deletePost
    events:
      - http:
          path: posts/{uuid}
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  migrationProcess:
    handler: dist/handlers/migrations.process

resources: 
  Resources: 
    PostsTopic: 
      Type: AWS::SNS::Topic 
      Properties: 
        DisplayName: 'Posts Topic' 
        TopicName: PostsTopic