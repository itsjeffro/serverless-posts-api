service: itsjeffro

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway: 
    restApiId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-restApiId
    restApiRootResourceId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-rootResourceId
    restApiResources:
      v1: 
        Fn::ImportValue: ApiGateway-${self:provider.stage}-versionOneResourceId
  environment:
    DB_HOST: ${ssm:/InternalApi/Database/DB_HOST~true}
    DB_USER: ${ssm:/InternalApi/Database/DB_USER~true}
    DB_PASSWORD: ${ssm:/InternalApi/Database/DB_PASSWORD~true}
    DB_PORT: 3306
    DB_DATABASE: ${ssm:/InternalApi/Database/DB_DATABASE~true}
  vpc:
    subnetIds:
      ${ssm:/InternalApi/Vpc/Subnets~split}
    securityGroupIds:
      ${ssm:/InternalApi/Vpc/SecurityGroups~split}

package:
  exclude:
    - ./**
    - '!node_modules/**'
    - node_modules/aws-sdk/**
  include:
    - dist/**
    - migrations/**
    - config/**

custom:
  app:
    version: v1
  apiGateway:
    authorizerId:
      Fn:ImportValue: ApiGateway-${self:provider.stage}-authorizer

functions:
  getPosts:
    handler: dist/handlers/posts.getPosts
    events:
      - http:
          path: ${self:custom.app.version}/posts
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  getPost:
    handler: dist/handlers/posts.getPost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  createPost:
    handler: dist/handlers/posts.createPost
    events:
      - http:
          path: ${self:custom.app.version}/posts
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  updatePost:
    handler: dist/handlers/posts.updatePost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  deletePost:
    handler: dist/handlers/posts.deletePost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  migrationProcess:
    handler: dist/handlers/migrations.process
    reservedConcurrency: 1
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: 
              - PostsMigrationsQueue
              - Arn

resources:
  Resources:
    PostsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Posts Topic'
        TopicName: PostsTopic-${self:provider.stage}
        
    PostsMigrationsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: posts-${self:provider.stage}-migrations-dlq
        MessageRetentionPeriod: 1209600
    
    PostsMigrationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: posts-${self:provider.stage}-migrations
        RedrivePolicy:
          maxReceiveCount: 1
          deadLetterTargetArn: 
            Fn::GetAtt: 
              - PostsMigrationsDeadLetterQueue 
              - Arn 
