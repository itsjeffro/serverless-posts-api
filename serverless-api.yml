service: itsjeffro

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway: 
    restApiId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-restApiId
    restApiRootResourceId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-rootResourceId
    restApiResources:
      v1: 
        Fn::ImportValue: ApiGateway-${self:provider.stage}-versionOneResourceId
  environment: ${file(./serverless/config/env.yml):env.${self:provider.stage}}
  vpc: ${file(./serverless/config/vpc.yml):vpc.${self:provider.stage}}

package:
  exclude:
    - ./**
    - '!node_modules/**'
    - node_modules/aws-sdk/**
  include:
    - dist/**
    - config/**

custom:
  app:
    version: v1
  apiGateway:
    authorizerId:
      Fn:ImportValue: ApiGateway-${self:provider.stage}-authorizer

functions:
  getPosts:
    handler: dist/handlers/posts.getPosts
    events:
      - http:
          path: ${self:custom.app.version}/posts
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  getPost:
    handler: dist/handlers/posts.getPost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  createPost:
    handler: dist/handlers/posts.createPost
    events:
      - http:
          path: ${self:custom.app.version}/posts
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  updatePost:
    handler: dist/handlers/posts.updatePost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}

  deletePost:
    handler: dist/handlers/posts.deletePost
    events:
      - http:
          path: ${self:custom.app.version}/posts/{uuid}
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiGatewayRestApiAuthorizer}
