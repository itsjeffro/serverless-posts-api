service: itsjeffro

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  apiGateway: 
    restApiId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-restApiId
    restApiRootResourceId: 
      'Fn::ImportValue': ApiGateway-${self:provider.stage}-rootResourceId
    restApiResources:
      v1: 
        Fn::ImportValue: ApiGateway-${self:provider.stage}-versionOneResourceId
  environment:
    DB_HOST: ${file(./serverless/config/env.yml):env.${self:provider.stage}.DB_HOST}
    DB_USER: ${file(./serverless/config/env.yml):env.${self:provider.stage}.DB_USER}
    DB_PASSWORD: ${file(./serverless/config/env.yml):env.${self:provider.stage}.DB_PASSWORD}
    DB_PORT: ${file(./serverless/config/env.yml):env.${self:provider.stage}.DB_PORT}
    DB_DATABASE: ${file(./serverless/config/env.yml):env.${self:provider.stage}.DB_DATABASE}
  vpc: ${file(./serverless/config/vpc.yml):vpc.${self:provider.stage}}

package:
  exclude:
    - ./**
    - '!node_modules/**'
    - node_modules/aws-sdk/**
    - node_modules/serverless-offline/**
    - node_modules/serverless-dotenv-plugin/**
  include:
    - dist/**
    - config/**

functions:
  application:
    handler: dist/handlers/applicationHandler.handler
    events:
      - http: 
          path: /
          method: ANY
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiKeyAuthorizer}
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId: ${cf:api-gateway-dev.apiKeyAuthorizer}
